name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    env:
      PACKAGE: carclib-${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install build tools (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y build-essential

      - name: Install build tools (Windows)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Build libccar (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          gcc -O2 -std=c99 -fPIC -shared build_libccar.c -o libccar.so -lm
          cp libccar.so car_demo/lib/

      - name: Build libccar (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          clang -O2 -std=c99 -dynamiclib build_libccar.c -o libccar.dylib -lm
          cp libccar.dylib car_demo/lib/

      - name: Build libccar (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cl /O2 /LD build_libccar.c /Fe:ccar.dll /link /IMPLIB:.\ccar.lib
          ls -Recurse
          Copy-Item ccar.dll -Destination car_demo\lib\
          Copy-Item ccar.lib -Destination car_demo\lib\

      - name: Build Rust project
        working-directory: car_demo
        run: cargo build --release

      - name: Package artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p "${PACKAGE}"
          mv car_demo/target/release/libccar_demo "${PACKAGE}"
          mv libccar.so "${PACKAGE}"

      - name: Package artifacts (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p "${PACKAGE}"
          mv car_demo/target/release/libccar_demo "${PACKAGE}"
          mv libccar.dylib "${PACKAGE}"

      - name: Package artifacts (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          New-Item -ItemType Directory -Force -Path $env:PACKAGE
          Move-Item -Path car_demo/target/release/libccar_demo.exe -Destination $env:PACKAGE
          Move-Item -Path ccar.dll -Destination $env:PACKAGE
          Move-Item -Path ccar.lib -Destination $env:PACKAGE

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE }}
          path: ${{ env.PACKAGE }}
